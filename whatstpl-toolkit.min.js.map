{"version":3,"sources":["webpack://WhatsTplToolkit/webpack/universalModuleDefinition","webpack://WhatsTplToolkit/webpack/bootstrap","webpack://WhatsTplToolkit/./src/util.ts","webpack://WhatsTplToolkit/./src/errors.ts","webpack://WhatsTplToolkit/./node_modules/tslib/tslib.es6.js","webpack://WhatsTplToolkit/./src/parser.ts","webpack://WhatsTplToolkit/./src/index.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","dirname","path","replace","lastIndexOf","length","substring","Separator","basename","filename","extname","dir","match","normalizePath","parts","split","splice","join","getCwd","IsBrowser","location","protocol","host","pathname","process","cwd","isAbsPath","test","window","XMLHttpRequest","platform","escape","html","String","baseName","getAbsPath","getObjectValues","obj","res","prop","push","getFunctionBodyOffset","fn","fnStr","toString","indexOf","defArr","slice","inNewLine","column","line","UnclosedTagError","_super","message","_this","tslib_1","__extends","SyntaxError","__webpack_exports__","__importDefault","extendStatics","setPrototypeOf","__proto__","Array","b","__","constructor","create","__assign","assign","t","arguments","__rest","e","getOwnPropertySymbols","__decorate","decorators","target","key","desc","getOwnPropertyDescriptor","Reflect","decorate","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","step","next","rejected","result","done","then","apply","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","__exportStar","__values","__read","ar","error","__spread","concat","__await","__asyncGenerator","asyncIterator","q","a","resume","fulfill","settle","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__importStar","mod","k","default","errors_1","util_1","AttrRe","Parser","listeners","outputTags","OutputTags","blockTags","BlockTags","renewRegExp","on","node","attrs","attributes","tag","tags","pair","tagStr","pattern","regexp","RegExp","event","listener","emit","args","_i","_a","_b","parse","type","contents","closed","trimRight","parseHtml","getLine","lineStr","left","end","attachTextNode","endIndex","nodes","keepPureSpaces","textNode","trimLeft","parent","LineInfo","matches","index","commentNode","parseComment","varNode","endColumn","ending","tagClosed","blockNode","LineInfo_1","applyAttr","blockClosed","NaN","engine","EngineName","snippetNode","leading","left_1","quoted","pos","quote","trim"],"mappings":"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","file":"whatstpl-toolkit.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"WhatsTplToolkit\"] = factory();\n\telse\n\t\troot[\"WhatsTplToolkit\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","/** Whether the program is runing in a browser. */\nexport const IsBrowser = typeof window == \"object\"\n    && typeof XMLHttpRequest == \"function\";\n\n/** Path separator. */\nexport const Separator = IsBrowser ? \"/\" :\n    (process.platform == \"win32\" ? \"\\\\\" : \"/\");\n\n/** Escapes HTML tags. */\nexport function escape(html: string): string {\n    return String(html).replace(/<\\/?[^>]*>/g, \"\");\n}\n\n/** Gets the dirname according to the given path. */\nexport function dirname(path: string): string {\n    if (path == \"/\") return path;\n\n    let i = path.replace(/\\\\/g, \"/\").lastIndexOf(\"/\");\n\n    if (i < 0 || path == \"/\")\n        return \".\";\n    else if (i == path.length - 1)\n        return dirname(path.substring(0, i));\n    else\n        return path.substring(0, i).replace(/\\/|\\\\/g, Separator);\n}\n\n/** Gets the basename of a file. */\nexport function basename(filename: string, extname: string = \"\"): string {\n    let dir = dirname(filename),\n        basename = (dir == \".\" && filename.match(/^\\.[\\/\\\\]/) == null)\n            ? filename : filename.substring(dir.length + 1);\n\n    if (extname) {\n        let i = basename.lastIndexOf(extname);\n        basename = i >= 0 ? basename.substring(0, i) : basename;\n    }\n\n    return basename;\n}\n\n/** Gets the extension name of a file. */\nexport function extname(filename: string): string {\n    let baseName = basename(filename),\n        i = baseName.lastIndexOf(\".\");\n    return i >= 0 ? baseName.substring(i) : \"\";\n}\n\n/** \n * Normalizes the given path, strips `../` and `./`, and corrects the path\n * separator.\n */\nexport function normalizePath(path: string): string {\n    let parts = path.split(/\\/|\\\\/);\n\n    for (let i = 0; i < parts.length; i++) {\n        if (parts[i] == \"..\") {\n            parts.splice(i - 1, 2);\n            i -= 2;\n        } else if (parts[i] == \".\") {\n            parts.splice(i, 1);\n            i -= 1;\n        }\n    }\n\n    return parts.join(Separator);\n}\n\n/** Gets the current working directory. */\nexport function getCwd(): string {\n    if (IsBrowser) {\n        return location.protocol + \"//\" + location.host\n            + dirname(location.pathname);\n    } else {\n        return process.cwd();\n    }\n}\n\n/** Checks if the given path is absolute. */\nexport function isAbsPath(path: string): boolean {\n    return path[0] == \"/\" || /^[a-zA-Z]:[\\/\\\\]/.test(path);\n}\n\n/** Gets the absolute path of a file. */\nexport function getAbsPath(filename: string): string {\n    if (!isAbsPath(filename)) {\n        let dir = getCwd(),\n            noSep = dir[dir.length - 1] == \"/\";\n\n        filename = dir + (noSep ? \"\" : Separator) + filename;\n    }\n\n    return normalizePath(filename);\n}\n\n/** Gets the values of an object. */\nexport function getObjectValues(obj: any): any[] {\n    let res = [];\n\n    for (let prop in obj) {\n        if (obj.hasOwnProperty(prop))\n            res.push(obj[prop]);\n    }\n\n    return res;\n}\n\n/** \n * Gets the function body offest, usually to get from a `new Function`, which\n * the function string is platform independent.\n */\nexport function getFunctionBodyOffset(fn: Function): { line: number, column: number } {\n    let fnStr = fn.toString(),\n        i = fnStr.indexOf(\"{\") + 1,\n        defArr = fnStr.slice(0, i).split(\"\\n\"),\n        inNewLine = fnStr[i] == \"\\n\",\n        column = inNewLine ? 0 : defArr[defArr.length - 1].indexOf(\"{\") + 2,\n        line = inNewLine ? defArr.length : defArr.length - 1;\n\n    return { line, column };\n}","export class UnclosedTagError extends SyntaxError {\n    filename: string;\n    line: number;\n    column: number;\n\n    constructor(message: string, filename: string, line: number, column: number) {\n        super(message);\n        this.filename = filename;\n        this.line = line;\n        this.column = column;\n    }\n}","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Node, Attribute } from \"./interfaces\";\nimport { UnclosedTagError } from \"./errors\";\nimport { getAbsPath } from \"./util\";\n\nconst AttrRe = /([0-9a-zA-Z:\\-]+)\\s*=\\s*|([0-9a-zA-Z:\\-]+)\\s*/;\n\n/** Parser for **whatstpl** template. */\nexport class Parser {\n    readonly filename: string;\n    readonly nodes: Node[];\n\n    private html: string;\n    private listeners: { [event: string]: Array<(...args) => void> } = {};\n    private outputTags: string[] = Parser.OutputTags;\n    private blockTags: string[] = Parser.BlockTags;\n    private regexp: RegExp;\n\n    static readonly EngineName = \"whatstpl\";\n    static BlockTags: string[] = [\n        \"layout\",\n        \"import\",\n        \"export\",\n        \"block\",\n        \"if\",\n        \"else-if\",\n        \"else\",\n        \"switch\",\n        \"case\",\n        \"default\",\n        \"for\",\n        \"while\",\n        \"do\", // do... while...\n        \"continue\",\n        \"break\",\n        \"script\",\n    ];\n    static OutputTags: string[] = [\n        \"!\", // no output\n        \"@\", // raw output\n        \"#\", // escaped output\n    ];\n\n    constructor(filename: string = \"\") {\n        if (filename)\n            this.filename = getAbsPath(filename);\n        else\n            this.filename = \"undefined\";\n\n        this.renewRegExp();\n\n        // When passing '<block>' tag, push the user-defined block tags and\n        // imported tags into tag list.\n        this.on(\"block\", (node: Node) => {\n            let attrs = node.attributes;\n\n            if (node.tag == \"block\") {\n                this.blockTags.push(attrs.name.value);\n                this.renewRegExp();\n            } else if (node.tag == \"import\" && attrs.target && attrs.target.value) {\n                // Importing user-defined blocks from another template.\n                let tags = attrs.target.value.split(/,\\s*/);\n\n                for (let i in tags) {\n                    // allow 'as' syntax\n                    let pair = tags[i].split(/\\s+as\\s+/);\n                    tags[i] = pair[1] || pair[0];\n                }\n\n                this.blockTags = this.blockTags.concat(tags);\n                this.renewRegExp();\n            }\n        });\n    }\n\n    /** Renews the internal `regexp` that used to match tags and blocks. */\n    private renewRegExp() {\n        let tagStr = this.blockTags.join(\"|\");\n        let pattern = \"<!--(.*?)-->|<!--(.*)|(\"\n            + this.outputTags.join(\"|\")\n            + \")\\{(.+?)\\}|<(\"\n            + tagStr\n            + \")[\\\\s|\\\\/|>]|<\\\\/(\"\n            + tagStr\n            + \")>\";\n\n        this.regexp = new RegExp(pattern);\n    }\n\n    on(event: string, listener: (...args: any[]) => void) {\n        if (!this.listeners[event])\n            this.listeners[event] = [];\n\n        this.listeners[event].push(listener);\n    }\n\n    emit(event: string, ...args): boolean {\n        if (!this.listeners[event] || !this.listeners[event].length)\n            return false;\n\n        for (let listener of this.listeners[event]) {\n            listener(...args);\n        }\n\n        return true;\n    }\n\n    /** Parses the template in HTML format. */\n    parse(html: string): Node {\n        let root: Node = {\n            tag: \"root\",\n            type: \"root\",\n            line: 1,\n            column: 1,\n            contents: [],\n            closed: false\n        };\n        this.html = html.trimRight().replace(/\\r\\n|\\r/g, \"\\n\");\n        this.parseHtml(this.html, 1, 1, root);\n        return root;\n    }\n\n    /** Gets a line of string in the HTML. */\n    private getLine(html: string, line: number): {\n        lineStr: string;\n        /** remaining HTML contents. */\n        left: string;\n        line: number;\n    } {\n        let lineStr: string, left: string;\n\n        // searching until a non-empty line is found.\n        while (true) {\n            let end = html.indexOf(\"\\n\");\n\n            lineStr = (end >= 0 ? html.substring(0, end) : html).trimRight();\n            left = end >= 0 ? html.substring(end + 1) : \"\";\n\n            if (lineStr || !left) {\n                break;\n            } else {\n                line += 1;\n                html = left;\n            }\n        }\n\n        return { lineStr, left, line };\n    }\n\n    private attachTextNode(\n        lineStr: string,\n        line: number,\n        column: number,\n        endIndex: number,\n        nodes: Node[],\n        keepPureSpaces: boolean = false\n    ) {\n        let textNode: Node = {\n            type: \"text\",\n            line,\n            column,\n            contents: endIndex ? lineStr.substring(0, endIndex) : lineStr + \"\\n\",\n            closed: true,\n        };\n\n        if (keepPureSpaces || (<string>textNode.contents).trimLeft()) {\n            nodes.push(textNode);\n            this.emit(\"text\", textNode); // emit 'text' event.\n        }\n    }\n\n    private parseHtml(html: string, line: number, column: number = 1, parent: Node): {\n        /** the current line number of the remaining HTML contents. */\n        line: number;\n        /** the current column number of the remaining HTML contents. */\n        column: number;\n        /** remaining HTML contents. */\n        left: string;\n    } {\n        let LineInfo = this.getLine(html, line),\n            lineStr = LineInfo.lineStr,\n            matches = lineStr.match(this.regexp),\n            nodes = <Node[]>parent.contents;\n\n        // remaining HTML contents.\n        html = LineInfo.left;\n        line = LineInfo.line;\n\n        if (!matches) { // matches plain text.\n            if (parent.tag == \"script\"\n                && parent.attributes.engine\n                && parent.attributes.engine.value == Parser.EngineName) {\n                let snippetNode: Node = {\n                    type: \"snippet\",\n                    line,\n                    column,\n                    contents: lineStr + \"\\n\",\n                    closed: true,\n                };\n\n                nodes.push(snippetNode);\n                this.emit(\"snippet\", snippetNode); // emit 'text' event.\n            } else {\n                this.attachTextNode(lineStr, line, column, NaN, nodes);\n            }\n            line += 1;\n            column = 1;\n        } else if (matches[1] && parent.tag != \"script\") { // matches complete comment.\n            if (matches.index) { // has plain text before the comment.\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n\n            let left = lineStr.substring(matches.index + matches[0].length),\n                commentNode: Node = {\n                    type: \"comment\",\n                    line,\n                    column,\n                    contents: matches[0], // include <!-- and -->,\n                    closed: false\n                };\n\n            nodes.push(commentNode);\n            this.emit(\"comment\", commentNode);\n\n            if (left) {\n                html = left + \"\\n\" + html;\n                column += matches[0].length;\n            } else {\n                commentNode.contents += \"\\n\";\n                line += 1;\n                column = 1;\n            }\n        } else if (matches[2] && parent.tag != \"script\") { // matches incomplete comment.\n            if (matches.index) { // has plain text before the comment.\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n\n            let commentNode: Node = {\n                type: \"comment\",\n                line,\n                column,\n                contents: lineStr.substring(matches.index), // include <!--\n                closed: false\n            }\n\n            line += 1;\n            column = 1;\n\n            let res = this.parseComment(html, line, column, commentNode);\n\n            nodes.push(commentNode);\n            this.emit(\"comment\", commentNode);\n\n            html = res.left;\n            line = res.line;\n            column = res.column;\n        } else if (matches[3] && matches[4]) { // matches output statement.\n            if (matches.index) { // has plain text before output statement.\n                this.attachTextNode(lineStr, line, column, matches.index, nodes, matches[3] != \"!\");\n                column += matches.index;\n            }\n\n            // column number in an output statement is the position after '{'.\n            column += 2;\n\n            let varNode: Node = {\n                tag: matches[3], // !, @, #\n                type: \"var\",\n                line,\n                column,\n                contents: matches[4],\n                closed: true,\n            };\n\n            nodes.push(varNode);\n            this.emit(\"var\", varNode);\n\n            // end-column number in an output statement is the position after '}'.\n            let endColumn = matches.index + matches[4].length + 3,\n                left = lineStr.substring(endColumn); // text after output statement.\n\n            if (left.trimRight()) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += matches[4].length + 1;\n            } else {\n                line += 1;\n                column = 1;\n            }\n        } else if (matches[5] && parent.tag != \"script\") { //matches block statement.\n            if (matches.index) {  // has plain text before block tag.\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n                column += matches.index;\n            }\n\n            let endColumn = matches.index + matches[0].length,\n                ending = lineStr[endColumn - 1],\n                tagClosed = ending == \"/\" || ending == \">\",\n                blockNode: Node = {\n                    tag: matches[5],\n                    type: \"block\",\n                    line,\n                    column,\n                    attributes: {},\n                    contents: [],\n                    closed: false,\n                }\n\n            if (tagClosed)\n                endColumn -= 1;\n\n            let left = lineStr.substring(endColumn); // text after output statement.\n\n            if (!left && html) {\n                // If no attribute string presents in the current line, then \n                // try to get it from a new line, thus the column number is \n                // reset to 1.\n                column = 1;\n\n                let LineInfo = this.getLine(html, line);\n                if (LineInfo.lineStr) {\n                    left = LineInfo.lineStr;\n                    html = LineInfo.left;\n                }\n            }\n\n            if (left) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += matches[0].length;\n\n                if (tagClosed)\n                    column -= 1;\n            } else {\n                // When searched to the last line and the tag has been been \n                // closed, an error will be throw.\n                throw new UnclosedTagError(\"unclosed tag\", this.filename, line, column);\n            }\n\n            // apply attributes.\n            let res = this.applyAttr(html, line, column, blockNode.attributes);\n\n            blockNode.closed = res.blockClosed;\n\n            if (res.left && !blockNode.closed) { // parse children blocks.\n                res = <any>this.parseHtml(res.left, res.line, res.column, blockNode);\n            }\n\n            nodes.push(blockNode);\n            this.emit(\"block\", blockNode);\n\n            html = res.left;\n            line = res.line;\n            column = res.column;\n        } else if (matches[6] && matches[6] == parent.tag) { // matches close tag.\n            if (matches.index && parent.tag != \"script\") {  // has plain text before block close tag.\n                this.attachTextNode(lineStr, line, column, matches.index, nodes);\n            }\n\n            parent.closed = true;\n\n            // end-column number after close tag.\n            let endColumn = matches.index + matches[0].length,\n                left = lineStr.substring(endColumn); // text after output statement.\n\n            if (left) {\n                html = left + (html ? \"\\n\" + html : \"\");\n                column += endColumn;\n            } else {\n                line += 1;\n                column = 1;\n            }\n        } else { // matches plain text.\n            this.attachTextNode(lineStr, line, column, NaN, nodes);\n            line += 1;\n            column = 1;\n        }\n\n        if (html && !parent.closed) { // recursively parse the remaining HTML.\n            return this.parseHtml(html, line, column, parent);\n        } else {\n            parent.closed = true;\n            return { line, column, left: html };\n        }\n    }\n\n    private applyAttr(html: string, line: number, column: number, attrs: {\n        [name: string]: Attribute\n    }): {\n            /** the current line number of the remaining HTML contents. */\n            line: number;\n            /** the current column number of the remaining HTML contents. */\n            column: number;\n            /** remaining HTML contents. */\n            left: string;\n            /** Whether the current block if self-closed. */\n            blockClosed: boolean;\n        } {\n        let LineInfo = this.getLine(html, line),\n            lineStr = LineInfo.lineStr,\n            leading = lineStr.trimLeft()[0],\n            tagClosed = leading == \"/\" || leading == \">\",\n            matches: RegExpMatchArray = tagClosed ? null : lineStr.match(AttrRe);\n\n        line = LineInfo.line;\n        html = LineInfo.left;\n\n        if (!matches) { // no attribute matches.\n            let i = lineStr.indexOf(\">\");\n\n            if (i === -1) {\n                // When searched to the last line and the tag has been been \n                // closed, an error will be throw.\n                throw new UnclosedTagError(\"unclosed tag\", this.filename, line, column);\n            } else {\n                column += i + 1;\n\n                let left = lineStr.substring(i + 1);\n\n                if (left) {\n                    html = left + \"\\n\" + html;\n                } else {\n                    line += 1;\n                    column = 1;\n                }\n            }\n\n            return {\n                line,\n                column,\n                left: html,\n                blockClosed: leading == \"/\"\n            };\n        }\n\n        let name: string;\n        let value: string;\n        let quoted: boolean = true; // whether the value is wrapped by quote marks.\n        let left: string; // remaining text in the line\n\n        if (matches[1]) { // match name=\"value\" style\n            let pos = matches.index + matches[0].length, // position of quote mark\n                quote = lineStr[pos],\n                end: number;\n\n            quoted = quote == \"'\" || quote == '\"';\n\n            if (quoted)\n                pos += 1;\n\n            if (quoted) {\n                end = lineStr.indexOf(quote, pos);\n            } else {\n                end = lineStr.indexOf(\"/\", pos);\n                if (end === -1)\n                    end = lineStr.indexOf(\">\", pos);\n            }\n\n            name = matches[1], // attribute name\n                value = end === -1 ? \"\" : lineStr.substring(pos, end);\n            left = lineStr.substring(end + 1);\n            column += pos;\n        } else if (matches[2]) { // matches short-hand (name is value) style.\n            name = value = matches[2].trim();\n            left = lineStr.substring(matches.index + matches[0].length);\n            column += matches.index;\n        }\n\n        attrs[name] = { name, value, line, column };\n\n        if (left) {\n            html = left + \"\\n\" + html;\n            column += (matches[1] ? value.length : matches[0].length);\n            column += (quoted ? 1 : 0);\n        } else {\n            line += 1;\n            column = 1;\n        }\n\n        return this.applyAttr(html, line, column, attrs);\n    }\n\n    private parseComment(html: string, line: number, column: number, commentNode: Node): {\n        /** the current line number of the remaining HTML contents. */\n        line: number;\n        /** the current column number of the remaining HTML contents. */\n        column: number;\n        /** remaining HTML contents. */\n        left: string;\n    } {\n        let LineInfo = this.getLine(html, line),\n            lineStr = LineInfo.lineStr,\n            matches = lineStr && lineStr.match(/-->/);\n\n        line = LineInfo.line;\n        html = LineInfo.left;\n\n        if (lineStr)\n            commentNode.contents += \"\\n\";\n\n        if (!matches) { // matches comment contents, but not at the end.\n            commentNode.contents += lineStr;\n            line += 1;\n            column = 1;\n\n            if (html) {\n                return this.parseComment(html, line, column, commentNode);\n            } else {\n                return { line, column, left: html };\n            }\n        } else {\n            if (matches.index) { // has comment contents before the close tag.\n                commentNode.contents += lineStr.substring(0, matches.index);\n            }\n\n            commentNode.contents += matches[0]; // include -->\n            commentNode.closed = true;\n            column += matches.index + 3;\n\n            let left = lineStr.substring(column);\n\n            if (left) {\n                html = left + \"\\n\" + html;\n            } else {\n                line += 1;\n                column = 1;\n            }\n        }\n\n        return { line, column, left: html };\n    }\n}","export * from \"./errors\";\nexport * from \"./interfaces\";\nexport * from \"./parser\";\nexport * from \"./util\";"],"sourceRoot":""}